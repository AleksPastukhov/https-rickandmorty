{"version":3,"file":"static/js/412.e194f883.chunk.js","mappings":"mOAGaA,EAAUC,EAAAA,EAAAA,IAAH,0HAKJ,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,SAAZ,IAGJC,GAAUJ,EAAAA,EAAAA,GAAOK,EAAAA,GAAPL,CAAH,iVACE,SAAAC,GAAC,OAAIA,EAAEC,MAAMI,OAAOC,gBAAnB,IAGZ,SAAAN,GAAC,OAAIA,EAAEC,MAAMI,OAAOC,gBAAnB,IAIU,SAAAN,GAAC,OAAIA,EAAEC,MAAMM,UAAZ,IACP,SAAAP,GAAC,OAAIA,EAAEC,MAAMM,UAAZ,IAKJ,SAAAP,GAAC,OAAIA,EAAEC,MAAMI,OAAOG,gBAAnB,IACU,SAAAR,GAAC,OAAIA,EAAEC,MAAMI,OAAOG,gBAAnB,I,kBC4CzB,EAhEkB,WAAO,IAAD,IACdC,GAAgBC,EAAAA,EAAAA,MAAhBD,YACR,GAA0CE,EAAAA,EAAAA,UAAS,MAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,EAAY,iBAAGF,QAAH,IAAGA,GAAH,UAAGA,EAAUG,aAAb,aAAG,EAAiBC,YAApB,QAA4B,IAQ9C,OANAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAiBX,GACdY,KAAKR,GACLS,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,EAAhB,GACb,GAAE,CAACd,IAECG,GAcH,UAACd,EAAD,YACE,SAACK,EAAD,CAASuB,KAAK,SAASC,GAAIX,EAA3B,sBAGA,gBACEY,IAAKhB,EAAciB,MAAd,UAAyBjB,EAAciB,OAAUC,EACtDC,IAAG,eAAUnB,EAAcoB,MAC3BC,MAAM,QACNC,OAAO,WAET,wBAAKtB,EAAcoB,QACnB,yCACA,2BACE,2BACE,oCACA,uBAAIpB,EAAcuB,aAEpB,2BACE,oCACA,uBAAIvB,EAAcwB,aAEpB,2BACE,oCACA,uBAAIxB,EAAcyB,cAEpB,2BACE,oCACA,uBAAIzB,EAAc0B,OAAON,WAE3B,2BACE,kCACA,uBAAIpB,EAAcc,iBA5CjB,sCAiDV,C,+IClEKa,EAAW,4CAEV,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACiBC,EAAAA,EAAAA,IAAUF,GAD3B,cACCG,EADD,yBAEEA,EAAQC,MAFV,kEAKA,SAAevB,IAAtB,4CAAO,OAAP,oBAAO,yGAAgCX,EAAhC,+BAA8C,EAA9C,SACiBgC,EAAAA,EAAAA,IAAA,UAAaF,EAAb,YAAyB9B,IAD1C,cACCiC,EADD,yBAEEA,EAAQC,MAFV,mEAKA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAAkCZ,EAAMa,GAAxC,gFACCC,EAAU,CACdC,OAAQ,CACNf,KAAAA,GAEFgB,OAAQH,EAAgBG,QALrB,SAQiBP,EAAAA,EAAAA,IAAA,UAAaF,GAAYO,GAR1C,cAQCJ,EARD,yBASEA,EAAQC,MATV,kE","sources":["components/pages/Character/Character.styled.jsx","components/pages/Character/Character.jsx","services/theRickandmortyApi.js"],"sourcesContent":["import { NavLink } from 'react-router-dom';\nimport styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  position: relative;\n  width: 95%;\n  margin: 20px auto;\n  padding: 10px;\n  box-shadow: ${p => p.theme.boxShadow};\n`;\n\nexport const NavItem = styled(NavLink)`\n  border: 1px solid ${p => p.theme.colors.primaryTextColor};\n  border-radius: 5px;\n  padding: 4px;\n  color: ${p => p.theme.colors.primaryTextColor};\n  font-size: 20px;\n  font-weight: 700;\n  text-decoration: none;\n  transition: color ${p => p.theme.transition},\n    transform ${p => p.theme.transition};\n\n  &:hover,\n  &:focus,\n  &.active {\n    color: ${p => p.theme.colors.accentСolor};\n    border: 1px solid ${p => p.theme.colors.accentСolor};\n    transform: scale(1.04);\n  }\n`;\n","import { useParams, useLocation } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { getCharacterById } from '../../../services/theRickandmortyApi';\nimport { NavItem, Wrapper } from './Character.styled';\nimport img from '../../../images/no-foto.png';\n\nconst Character = () => {\n  const { characterId } = useParams();\n  const [characterData, setCharacterData] = useState(null);\n  const location = useLocation();\n  const backLinkHref = location?.state?.from ?? '/';\n\n  useEffect(() => {\n    getCharacterById(characterId)\n      .then(setCharacterData)\n      .catch(err => console.log(err));\n  }, [characterId]);\n\n  if (!characterData) {\n    return <h2>Loading...</h2>;\n  }\n\n  // const {\n  //   image,\n  //   name,\n  //   gender,\n  //   status,\n  //   species,\n  //   origin: { name: originName },\n  //   type,\n  // } = characterData;\n  return (\n    <Wrapper>\n      <NavItem type=\"button\" to={backLinkHref}>\n        Go back\n      </NavItem>\n      <img\n        src={characterData.image ? `${characterData.image}` : img}\n        alt={`Foto ${characterData.name}`}\n        width=\"300px\"\n        height=\"300px\"\n      />\n      <h1>{characterData.name}</h1>\n      <p>Informations</p>\n      <ul>\n        <li>\n          <h2>Gender</h2>\n          <p>{characterData.gender}</p>\n        </li>\n        <li>\n          <h2>Status</h2>\n          <p>{characterData.status}</p>\n        </li>\n        <li>\n          <h2>Specie</h2>\n          <p>{characterData.species}</p>\n        </li>\n        <li>\n          <h2>Origin</h2>\n          <p>{characterData.origin.name}</p>\n        </li>\n        <li>\n          <h2>Type</h2>\n          <p>{characterData.type}</p>\n        </li>\n      </ul>\n    </Wrapper>\n  );\n};\n\nexport default Character;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://rickandmortyapi.com/api/character';\n\nexport async function getAllCharacters() {\n  const respons = await axios.get(BASE_URL);\n  return respons.data;\n}\n\nexport async function getCharacterById(characterId = 1) {\n  const respons = await axios.get(`${BASE_URL}/${characterId}`);\n  return respons.data;\n}\n\nexport async function getCharacterByName(name, abortController) {\n  const options = {\n    params: {\n      name,\n    },\n    signal: abortController.signal,\n  };\n\n  const respons = await axios.get(`${BASE_URL}`, options);\n  return respons.data;\n}\n"],"names":["Wrapper","styled","p","theme","boxShadow","NavItem","NavLink","colors","primaryTextColor","transition","accentСolor","characterId","useParams","useState","characterData","setCharacterData","location","useLocation","backLinkHref","state","from","useEffect","getCharacterById","then","catch","err","console","log","type","to","src","image","img","alt","name","width","height","gender","status","species","origin","BASE_URL","getAllCharacters","axios","respons","data","getCharacterByName","abortController","options","params","signal"],"sourceRoot":""}